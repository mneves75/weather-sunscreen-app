# State and Storage Management

## Context Architecture
- **ChatContext** ([src/context/ChatContext.tsx](mdc:src/context/ChatContext.tsx))
  - **API**: `createChat`, `deleteChat`, `sendMessage`, `loadChats`, `setCurrentChat`, `clearError`
  - **Flow**: add user message → placeholder assistant message → resolve via `DNSService` → replace placeholder
  - **State**: `chats[]`, `currentChat`, `isLoading`, `error`

- **SettingsContext** ([src/context/SettingsContext.tsx](mdc:src/context/SettingsContext.tsx))
  - **Storage**: AsyncStorage key `@chat_dns_settings`
  - **API**: `updateDnsServer`, `updatePreferDnsOverHttps`
  - **State**: `dnsServer`, `preferDnsOverHttps`

- **OnboardingContext** ([src/context/OnboardingContext.tsx](mdc:src/context/OnboardingContext.tsx))
  - **Storage**: AsyncStorage key `@chat_dns_onboarding`
  - **State**: `hasCompletedOnboarding`, `loading`

## Service Layer
- **StorageService** ([src/services/storageService.ts](mdc:src/services/storageService.ts))
  - **Sole interface** to AsyncStorage for chats
  - **Serialization**: dates to ISO strings; deserializes back to `Date` objects
  - **Auto-generation**: chat title from first user message
  - **Keys**: `@chat_dns_chats`, `@chat_dns_chat_${chatId}`

- **DNSLogService** ([src/services/dnsLogService.ts](mdc:src/services/dnsLogService.ts))
  - **Storage**: AsyncStorage key `@dns_query_logs` (max 100 entries)
  - **API**: `startQuery`, `logMethodAttempt`, `logMethodSuccess`, `logMethodFailure`, `endQuery`
  - **Tracking**: DNS query attempts with timing and method information

## Data Types
- **Core Types**: [src/types/chat.ts](mdc:src/types/chat.ts)
  - `Chat`: id, title, messages[], createdAt, updatedAt
  - `Message`: id, role, content, timestamp, status
  - `ChatContextType`: context interface with all methods

## Key Principles
- **Single Source of Truth**: Context manages state; services handle persistence
- **Immutable Updates**: Use spread operators and functional updates
- **Error Handling**: Centralized error state with user-friendly messages
- **Async Operations**: Proper loading states and error boundaries

## Do Not
- **Write to AsyncStorage directly** from components
- **Mutate context state** outside provided APIs
- **Bypass StorageService** for chat data operations
- **Store sensitive data** in AsyncStorage without encryption
- **Do not**
  - Write to AsyncStorage directly from components
  - Mutate context state outside provided APIs
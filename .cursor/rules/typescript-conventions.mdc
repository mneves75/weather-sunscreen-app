# TypeScript Conventions

## Compiler Settings
- **Config**: [tsconfig.json](mdc:tsconfig.json) - `strict: true`, `moduleResolution: bundler`
- **Base**: Extends `expo/tsconfig.base`

## Type Safety
- **Prefer explicit function signatures** on exports and public APIs
- **Avoid `any`**; model domain types in [src/types/chat.ts](mdc:src/types/chat.ts)
- **Narrow error handling** with typed errors (see `DNSError` in [modules/dns-native/index.ts](mdc:modules/dns-native/index.ts))
- **Use proper typing** for React components and hooks

## Import Patterns
- **Absolute imports** from `src/` where practical
- **Keep native module imports** isolated to services
- **Group imports**: React, third-party, local (alphabetical within groups)

## Code Style
- **Control flow**: Use guard clauses, early returns, minimal nesting
- **Formatting**: Match existing code style; prefer multi-line readability over complex one-liners
- **Naming**: Use descriptive names; avoid abbreviations

## Best Practices
- **Do not mutate AsyncStorage directly** in UI; go through `StorageService`
- **Do not introduce runtime-only type assertions** that weaken safety
- **Use proper error boundaries** and error handling patterns
- **Prefer functional components** with hooks over class components
- **Do not**
  - Mutate AsyncStorage directly in UI; go through `StorageService`
  - Introduce runtime-only type assertions that weaken safety
# DNSChat Project Structure Guide

## Entry Points
- **Main Entry**: [index.tsx](mdc:index.tsx) → [src/App.tsx](mdc:src/App.tsx)
- **Config**: [app.json](mdc:app.json) - Expo config with scheme `dnschat://`, new architecture enabled
- **Package**: [package.json](mdc:package.json) - React Native + Expo dependencies

## Core Architecture
- **Navigation**: [src/navigation/index.tsx](mdc:src/navigation/index.tsx) - React Navigation v7 with static navigation
- **State Management**: 
  - [src/context/ChatContext.tsx](mdc:src/context/ChatContext.tsx) - Chat state and DNS operations
  - [src/context/SettingsContext.tsx](mdc:src/context/SettingsContext.tsx) - App settings
  - [src/context/OnboardingContext.tsx](mdc:src/context/OnboardingContext.tsx) - Onboarding flow
- **Services**:
  - [src/services/dnsService.ts](mdc:src/services/dnsService.ts) - DNS query orchestration
  - [src/services/dnsLogService.ts](mdc:src/services/dnsLogService.ts) - Query logging
  - [src/services/storageService.ts](mdc:src/services/storageService.ts) - AsyncStorage wrapper
- **Types**: [src/types/chat.ts](mdc:src/types/chat.ts) - Core data models

## Native DNS Integration
- **iOS Native**: [ios/DNSNative/DNSResolver.swift](mdc:ios/DNSNative/DNSResolver.swift), [ios/DNSNative/RNDNSModule.m](mdc:ios/DNSNative/RNDNSModule.m)
- **Android Native**: [android/app/src/main/java/com/dnschat/NativeDnsModule.kt](mdc:android/app/src/main/java/com/dnschat/NativeDnsModule.kt)
- **JS Bridge**: [modules/dns-native/index.ts](mdc:modules/dns-native/index.ts)
- **Expo Plugin**: [plugins/dns-native-plugin.js](mdc:plugins/dns-native-plugin.js)

## Key Behaviors
- **Deep Linking**: Scheme `dnschat://` configured in [app.json](mdc:app.json) and consumed in [src/App.tsx](mdc:src/App.tsx)
- **DNS Flow**: Configurable priority - Native → UDP → TCP → DoH → Mock OR DoH → Native → UDP → TCP → Mock
- **DNS Logging**: Real-time query logging with persistent storage
- **New Architecture**: `newArchEnabled: true` in [app.json](mdc:app.json)

## Conventions
- Keep logic in `src/services/*`; UI in `src/components/*` and screens in `src/navigation/screens/*`
- Persist via `StorageService`; do not read/write AsyncStorage directly in components
- Extend navigation only via [src/navigation/index.tsx](mdc:src/navigation/index.tsx)
- Keep logic in `src/services/*`; UI in `src/components/*` and screens in `src/navigation/screens/*`
- Persist via `StorageService`; do not read/write AsyncStorage directly in components
- Extend navigation only via [src/navigation/index.tsx](mdc:src/navigation/index.tsx)
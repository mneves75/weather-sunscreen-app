---
description: Expo SDK 54 and React Native 0.81 specific patterns
---

# Expo SDK 54 Patterns

## Overview
This app uses Expo SDK 54 with React Native 0.81 and React 19.1, leveraging the latest features including iOS precompiled XCFrameworks, new File System API, and modern architecture support.

## Configuration
- [app.json](mdc:app.json) - Expo configuration
- [package.json](mdc:package.json) - Dependencies

## Key Features

### New Architecture
```json
// app.json
{
  "expo": {
    "newArchEnabled": true,
    "experiments": {
      "typedRoutes": true,
      "autolinkingModuleResolution": true
    }
  }
}
```

### Precompiled XCFrameworks (iOS)
- SDK 54 ships precompiled React Native for faster builds
- Avoid `use_frameworks!` in Podfile until Expo adds support
- Significant build time improvements on iOS

### Minimum Requirements
- **Node**: 20.19.4+
- **Xcode**: 16.1+ (Xcode 26 recommended for iOS 26 features)
- **iOS**: 13+ (iOS 26+ for Liquid Glass)
- **Android**: API 21+

## Updated APIs

### File System (New Default)
The new `expo-file-system` API is now default (former `/next`):

```typescript
// ✅ SDK 54 - New API (default)
import * as FileSystem from 'expo-file-system';

await FileSystem.writeAsStringAsync(uri, content);
const data = await FileSystem.readAsStringAsync(uri);

// ❌ Legacy API (will be removed in SDK 55)
import * as FileSystem from 'expo-file-system/legacy';
```

### SQLite with localStorage
```typescript
import { openDatabaseAsync } from 'expo-sqlite';
import { localStorage } from 'expo-sqlite';

// Drop-in localStorage replacement
localStorage.setItem('key', 'value');
const value = localStorage.getItem('key');

// Extension loading for RAG/AI features
const db = await openDatabaseAsync('mydb.db');
await db.loadExtensionAsync('sqlite-vec'); // Bundled extension
```

### App Integrity (Optional)
For store-only builds requiring DeviceCheck/App Attest or Play Integrity:

```typescript
import { getIntegrityToken } from 'expo-app-integrity';

try {
  const token = await getIntegrityToken();
  // Use token for backend verification
} catch (error) {
  // Handle attestation failure
}
```

## Expo Router v6

### File-Based Routing
```typescript
// app/_layout.tsx
import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="(tabs)" />
      <Stack.Screen name="modal" options={{ presentation: 'modal' }} />
    </Stack>
  );
}
```

### Typed Routes
```typescript
// With experiments.typedRoutes enabled
import { router } from 'expo-router';

// ✅ Type-safe navigation
router.push('/weather/details');
router.push({ pathname: '/weather/[id]', params: { id: '123' } });

// ❌ TypeScript will error on invalid routes
router.push('/invalid-route'); // Error!
```

### Native Tabs (Unstable)
```typescript
import { NativeTabs } from 'expo-router/unstable-native-tabs';
import { Icon, Label, Badge } from 'expo-router/unstable-native-tabs';

export default function TabLayout() {
  return (
    <NativeTabs>
      <NativeTabs.Trigger name="home">
        <Icon sf="house.fill" />
        <Label>Home</Label>
        <Badge value={3} />
      </NativeTabs.Trigger>
      
      <NativeTabs.Trigger name="messages">
        <Icon sf="message.fill" />
        <Label>Messages</Label>
      </NativeTabs.Trigger>
    </NativeTabs>
  );
}
```

## React 19.1 Features

### Automatic Batching
```typescript
// All updates are automatically batched in React 19
function handleClick() {
  setCount(count + 1);
  setFlag(true);
  // Triggers only one re-render
}
```

### Transitions
```typescript
import { useTransition } from 'react';

function SearchScreen() {
  const [isPending, startTransition] = useTransition();
  const [searchTerm, setSearchTerm] = useState('');

  const handleSearch = (term: string) => {
    setSearchTerm(term); // Urgent update

    startTransition(() => {
      // Non-urgent update
      performHeavySearch(term);
    });
  };

  return (
    <>
      <SearchInput onChange={handleSearch} />
      {isPending && <LoadingSpinner />}
    </>
  );
}
```

### Suspense for Data Fetching
```typescript
import { Suspense } from 'react';

function WeatherScreen() {
  return (
    <Suspense fallback={<LoadingSpinner />}>
      <WeatherData />
    </Suspense>
  );
}

function WeatherData() {
  const data = use(weatherPromise); // React 19 use() hook
  return <WeatherDisplay data={data} />;
}
```

## Performance Optimization

### Module Resolution
Enable autolinking module resolution for better performance:

```json
// app.json
{
  "expo": {
    "experiments": {
      "autolinkingModuleResolution": true
    }
  }
}
```

This keeps Metro resolution aligned with native autolinking and resolves single `react`/`react-dom` versions.

### iOS Build Optimization
```ruby
# ios/Podfile
# Don't use use_frameworks! until Expo adds support
# This allows precompiled XCFrameworks to work

platform :ios, '13.4'
require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")

target 'YourApp' do
  use_expo_modules!
  config = use_native_modules!
  
  # React Native Maps if needed
  # use_frameworks! :linkage => :static
end
```

### Android Edge-to-Edge
```json
// app.json
{
  "expo": {
    "android": {
      "edgeToEdgeEnabled": true,
      "predictiveBackGestureEnabled": false
    }
  }
}
```

## Platform-Specific Features

### iOS Permissions
```json
// app.json
{
  "expo": {
    "ios": {
      "infoPlist": {
        "NSLocationWhenInUseUsageDescription": "We need your location for weather data.",
        "NSLocationAlwaysAndWhenInUseUsageDescription": "We need your location for weather alerts.",
        "UIBackgroundModes": ["fetch", "remote-notification"]
      }
    }
  }
}
```

### Android Permissions
```json
// app.json
{
  "expo": {
    "android": {
      "permissions": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.FOREGROUND_SERVICE",
        "android.permission.WAKE_LOCK"
      ]
    }
  }
}
```

## Notifications

### Setup
```typescript
import * as Notifications from 'expo-notifications';

// Configure notification handler
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

// Request permissions
async function registerForPushNotifications() {
  const { status } = await Notifications.requestPermissionsAsync();
  
  if (status !== 'granted') {
    throw new Error('Permission not granted');
  }

  const token = await Notifications.getExpoPushTokenAsync();
  return token.data;
}
```

### Schedule Local Notification
```typescript
await Notifications.scheduleNotificationAsync({
  content: {
    title: 'UV Alert',
    body: 'High UV index detected. Apply sunscreen!',
    data: { uvIndex: 9 },
  },
  trigger: {
    seconds: 60,
  },
});
```

## Storage

### AsyncStorage
```typescript
import AsyncStorage from '@react-native-async-storage/async-storage';

// Store data
await AsyncStorage.setItem('key', JSON.stringify(data));

// Retrieve data
const stored = await AsyncStorage.getItem('key');
const data = stored ? JSON.parse(stored) : null;

// Remove data
await AsyncStorage.removeItem('key');
```

### SQLite
```typescript
import { openDatabaseAsync } from 'expo-sqlite';

const db = await openDatabaseAsync('weather.db');

// Create table
await db.execAsync(`
  CREATE TABLE IF NOT EXISTS weather (
    id INTEGER PRIMARY KEY,
    location TEXT,
    temperature REAL,
    timestamp INTEGER
  );
`);

// Insert data
await db.runAsync(
  'INSERT INTO weather (location, temperature, timestamp) VALUES (?, ?, ?)',
  'San Francisco', 72.5, Date.now()
);

// Query data
const result = await db.getAllAsync('SELECT * FROM weather');
```

## Best Practices

### DO
✅ Use new File System API (default import)
✅ Enable new architecture for better performance
✅ Use typed routes for type safety
✅ Leverage React 19 features (Suspense, transitions)
✅ Enable autolinking module resolution
✅ Test on real devices, especially for new features
✅ Use precompiled XCFrameworks on iOS
✅ Request permissions before accessing native features
✅ Handle permission denials gracefully

### DON'T
❌ Don't use legacy File System API (will be removed)
❌ Don't use `use_frameworks!` in Podfile yet
❌ Don't assume all devices support latest features
❌ Don't skip permission checks
❌ Don't hardcode platform-specific code without checks
❌ Don't forget to test on both iOS and Android
❌ Don't use deprecated APIs from older SDKs
❌ Don't skip error handling for async operations

## Migration from Older SDKs

### File System API Migration
```typescript
// Before (SDK < 54)
import * as FileSystem from 'expo-file-system/next';

// After (SDK 54+)
import * as FileSystem from 'expo-file-system';

// If you must use legacy
import * as FileSystem from 'expo-file-system/legacy';
```

### Router Migration
```typescript
// Before (expo-router < 6)
import { useRouter } from 'expo-router';
const router = useRouter();
router.push('/screen');

// After (expo-router 6)
import { router } from 'expo-router';
router.push('/screen'); // No hook needed
```

## Testing

### Unit Tests
```typescript
import { renderHook } from '@testing-library/react-hooks';

describe('Expo SDK 54 Features', () => {
  it('handles file system operations', async () => {
    const uri = FileSystem.documentDirectory + 'test.txt';
    await FileSystem.writeAsStringAsync(uri, 'test');
    const content = await FileSystem.readAsStringAsync(uri);
    expect(content).toBe('test');
  });

  it('handles typed routes', () => {
    router.push('/weather/123');
    expect(router.pathname).toBe('/weather/123');
  });
});
```

## Related Documentation
- [Expo SDK 54 Release Notes](mdc:docs/EXPO_REACT_NATIVE_DOCS/expo-sdk-54.md)
- [React Native 0.81 Guide](mdc:docs/EXPO_REACT_NATIVE_DOCS/eactnative.dev-docs-next.md)
- [Expo Router v6](mdc:docs/EXPO_REACT_NATIVE_DOCS/expo-native-tabs.md)
- [react-native-expo.mdc](mdc:.cursor/rules/react-native-expo.mdc)

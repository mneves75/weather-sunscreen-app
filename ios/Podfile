require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

# Avoid embedding prebuilt Hermes to work around sandboxing on Xcode 26 simulators
ENV['HERMES_USE_PREBUILT_BINARY'] = '0'

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']
ENV['RCT_USE_RN_DEP'] = '1' if podfile_properties['ios.buildReactNativeFromSource'] != 'true' && podfile_properties['newArchEnabled'] != 'false'
ENV['RCT_USE_PREBUILT_RNCORE'] = '1' if podfile_properties['ios.buildReactNativeFromSource'] != 'true' && podfile_properties['newArchEnabled'] != 'false'
platform :ios, podfile_properties['ios.deploymentTarget'] || '16.0'

prepare_react_native_project!

target 'WeatherSunscreen' do
  use_expo_modules!
  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # Ensure C++ headers precede C headers for Xcode 26 toolchain compatibility
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |cfg|
        hdrs = cfg.build_settings['HEADER_SEARCH_PATHS'] || ['$(inherited)']
        hdrs = [hdrs].flatten
        # Prepend libc++ headers, then ensure C headers present
        ordered = ['"$(SDKROOT)/usr/include/c++/v1"'] + hdrs + ['"$(SDKROOT)/usr/include"']
        cfg.build_settings['HEADER_SEARCH_PATHS'] = ordered.uniq

        # glog fixes seen on Xcode 26 simulators
        if target.name == 'glog'
          defs = cfg.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] || ['$(inherited)']
          defs = [defs].flatten
          defs << 'GLOG_NO_ABBREVIATED_SEVERITIES'
          defs << 'NO_THREADS=1'
          cfg.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = defs.uniq
        end

        # Swift 6 concurrency: reduce strictness for third-party pods to avoid errors
        cfg.build_settings['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
        cfg.build_settings['SWIFT_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
        # Build Expo/RN pods with Swift 5.9 to avoid Swift 6 breaking changes
        cfg.build_settings['SWIFT_VERSION'] = '5.9'
      end
    end

    # Patch Pods project: Fix Hermes user script to source .xcode.env and declare outputs
    begin
      pods_project = installer.pods_project
      pods_project.targets.each do |t|
        next unless t.name == 'hermes-engine'
        t.build_phases.each do |phase|
          next unless phase.respond_to?(:name) && phase.name&.include?('[Hermes] Replace Hermes')
          # Ensure the script sources .xcode.env in repo root and ios folder if present
          script = phase.shell_script || ""
          preamble = <<~'SH'
            set -e
            # Source Node path from .xcode.env if available (repo root and ios/)
            if [ -f "$SRCROOT/../.xcode.env" ]; then . "$SRCROOT/../.xcode.env"; fi
            if [ -f "$SRCROOT/.xcode.env" ]; then . "$SRCROOT/.xcode.env"; fi
            if [ -z "$NODE_BINARY" ]; then
              # Fallback to `which node` to avoid empty invocations
              NODE_BINARY="$(command -v node)"
            fi
          SH
          unless script.include?('# Source Node path from .xcode.env')
            phase.shell_script = preamble + "\n" + script
          end
          # Silence Xcode warning by declaring a dummy output
          if phase.respond_to?(:output_paths)
            outputs = phase.output_paths || []
            outputs << "$(DERIVED_FILE_DIR)/hermes_replace_done.txt"
            phase.output_paths = outputs.uniq
          end
        end
      end
    rescue => e
      Pod::UI.warn "[post_install] Failed to patch Hermes script: #{e}"
    end

    # Note: Do not modify CocoaPods-generated embed script; prior filtering caused syntax errors.
  end
end
